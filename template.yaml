AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-file-processing
  
Parameters:
  SourceBucket:
    Type: String
    Default: s3://agb-app-source
  ApplicationName:
    Type: String
    Default: serverless-file-processing
  ApiStageName:
    Type: String
    Default: dev
  EnableSQS:
    Type: String
    AllowedValues: [true, false]
    Default: true

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    ReservedConcurrentExecutions: 10
    Runtime: nodejs12.x
    # CodeUri: dist/
    CodeUri: s3://lambda-source-200921/serverless-file-processing.zip
    Timeout: 3
  
Resources:
    
  FileBucket:
    Type: AWS::S3::Bucket
    DependsOn: UnprocessedFileQueue
    Properties: 
      BucketName: !Sub ${ApplicationName}-file-bucket
      NotificationConfiguration:
        QueueConfigurations:
        - Event: 's3:ObjectCreated:*'
          Queue: !GetAtt UnprocessedFileQueue.Arn

  UnprocessedFileQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ApplicationName}-unprocessed-file-queue
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 360

  UnprocessedFileQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: UnprocessedFileQueue
    Properties: 
      Queues: 
        - !Ref UnprocessedFileQueue
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - SQS:SendMessage
            Effect: Allow
            Resource: !GetAtt UnprocessedFileQueue.Arn
            Principal:  
              Service: s3.amazonaws.com

  UnprocessedFileUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ApplicationName}-unprocessed-file-update-queue
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 60

  FileProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - FileBucket
      - UnprocessedFileQueue
      - UnprocessedFileUpdateQueue
    Properties:
      FunctionName: !Sub ${ApplicationName}-file-processor-function
      Handler: fileProcessorLambda.handle
      Timeout: 60
      Environment:
        Variables:
          UNPROCESSED_UPDATE_QUEUE_URL: !Ref UnprocessedFileUpdateQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt UnprocessedFileUpdateQueue.QueueName
        - S3ReadPolicy:
            BucketName: !Ref FileBucket
      Events:
        UnprocessedFileEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt UnprocessedFileQueue.Arn
            BatchSize: 10
            Enabled: !Ref EnableSQS

  LookupTable:    
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${ApplicationName}-lookup-table
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification: 
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions: 
        - 
          AttributeName: firmReference
          AttributeType: S
        - 
          AttributeName: itemType
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: firmReference
          KeyType: HASH
        - 
          AttributeName: itemType
          KeyType: RANGE

  FileUpdateProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - UnprocessedFileUpdateQueue
      - LookupTable
    Properties:
      FunctionName: !Sub ${ApplicationName}-file-update-processor-function
      Handler: fileUpdateProcessorLambda.handle
      Timeout: 10
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt UnprocessedFileUpdateQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref LookupTable
      Environment:
        Variables:
          TARGET_TABLE_NAME: !Ref LookupTable
      Events:
        UnprocessedUpdateEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt UnprocessedFileUpdateQueue.Arn
            BatchSize: 10
            Enabled: !Ref EnableSQS

  LookupTableEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${ApplicationName}-lookup-table-event-topic

  LookupTableEventProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - LookupTable
      - LookupTableEventTopic
    Properties:
      FunctionName: !Sub ${ApplicationName}-lookup-table-event-processor-function
      Handler: lookupTableEventProcessorLambda.handle
      Timeout: 6
      Environment:
        Variables:
          LOOKUP_TABLE_EVENT_TOPIC: !Ref LookupTableEventTopic
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref LookupTable
            StreamName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LookupTableEventTopic.TopicName
      Events:
        DatabaseEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt LookupTable.StreamArn
            Enabled: !Ref EnableSQS
            MaximumRetryAttempts: 0
            StartingPosition: TRIM_HORIZON

  IteratorUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ApplicationName}-iterator-update-queue
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 60

  IteratorUpdateQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: IteratorUpdateQueue
    Properties: 
      Queues: 
        - !Ref IteratorUpdateQueue
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - SQS:SendMessage
            Effect: Allow
            Resource: !GetAtt IteratorUpdateQueue.Arn
            Principal:  
              Service: sns.amazonaws.com

  IteratorUpdateQueueSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: 
      - LookupTableEventTopic
      - IteratorUpdateQueue
    Properties: 
      Endpoint: !GetAtt IteratorUpdateQueue.Arn
      FilterPolicy: 
        EventName: [ INSERT ]
      Protocol: sqs
      TopicArn: !Ref LookupTableEventTopic

  IteratorTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${ApplicationName}-iterator-table
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions: 
        - 
          AttributeName: iteratorType
          AttributeType: S
        - 
          AttributeName: sortKey
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: iteratorType
          KeyType: HASH
        - 
          AttributeName: sortKey
          KeyType: RANGE

  IteratorUpdateProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - IteratorUpdateQueue
      - IteratorTable
    Properties:
      FunctionName: !Sub ${ApplicationName}-iterator-update-processor-function
      Handler: iteratorUpdateProcessorLambda.handle
      Timeout: 10
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt IteratorUpdateQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref IteratorTable
      Environment:
        Variables:
          TARGET_TABLE_NAME: !Ref IteratorTable
      Events:
        UnprocessedUpdateEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt IteratorUpdateQueue.Arn
            BatchSize: 10
            Enabled: !Ref EnableSQS

  # AppSync-Example.yaml
  # https://gist.github.com/adrianhall/50e9fdf08e7a7e52d3ab0f01467b72f7

  LookupApiRole:
    Type: AWS::IAM::Role
    DependsOn: LookupTable
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - appsync.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${ApplicationName}-appsync-lookup-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                Resource: !GetAtt LookupTable.Arn

  LookupApi:
    Type: AWS::AppSync::GraphQLApi
    DependsOn: LookupApiRole
    Properties:
      Name: sfp-appsync-api
      AuthenticationType: API_KEY
                
  LookupApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt LookupApi.ApiId

  LookupDynamoDBTableDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn:
      - LookupApiRole
      - LookupApi
      - LookupTable
    Properties:
      ApiId: !GetAtt LookupApi.ApiId
      Name: LookupDynamoDBTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt LookupApiRole.Arn
      DynamoDBConfig:
        AwsRegion: !Sub ${AWS::Region}
        TableName: !Ref LookupTable

  LookupSchema:
    Type: AWS::AppSync::GraphQLSchema
    DependsOn: LookupApi
    Properties:
      ApiId: !GetAtt LookupApi.ApiId
      # DefinitionS3Location: !Sub ${SourceBucket}/${ApplicationName}/api.graphqls
      DefinitionS3Location: !Sub ${SourceBucket}/${ApplicationName}/api.graphqls
      # Definition: |
      #   type FirmAuthorisation {
      #     registeredFirmName: String!
      #     firmReference: String!
      #     addressLine1: String
      #     addressLine2: String
      #     addressLine3: String
      #     addressLine4: String
      #     addressLine5: String
      #     addressLine6: String
      #     postcodeIn: String
      #     postcodeOut: String
      #     currentAuthorisationStatusCode: String
      #   }
      #   type Query {
      #     getFirmAuthorisation(firmReference: String!): FirmAuthorisation
      #   }

  QueryGetFirmAuthorisationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: LookupSchema
    Properties:
      ApiId: !GetAtt LookupApi.ApiId
      TypeName: Query
      FieldName: getFirmAuthorisation
      DataSourceName: !GetAtt LookupDynamoDBTableDataSource.Name
      RequestMappingTemplateS3Location: !Sub ${SourceBucket}/${ApplicationName}/getFirmAuthorisationRequest.vtl
      ResponseMappingTemplateS3Location : !Sub ${SourceBucket}/${ApplicationName}/getFirmAuthorisationResponse.vtl
      # RequestMappingTemplate: |
      #   {
      #       "version": "2017-02-28",
      #       "operation": "GetItem",
      #       "key": {
      #           "firmReference": $util.dynamodb.toDynamoDBJson($ctx.args.firmReference),
      #           "itemType": $util.dynamodb.toDynamoDBJson("FirmAuthorisation"),
      #       }
      #   }        
      # ResponseMappingTemplate: "$utils.toJson($ctx.result)"

Outputs:
  
  LookupApiUrl:
    Description: Lookup API URL
    Value: !GetAtt LookupApi.GraphQLUrl

  LookupApiKey:
    Description: Lookup API Key
    Value: !GetAtt LookupApiKey.ApiKey